name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Change directory to /interactiveflix
        run: cd interactiveflix

      - name: Install dependencies
        run: npm install
        working-directory: ./interactiveflix

      - name: Run npm audit
        run: npm audit --audit-level=high
        working-directory: ./interactiveflix
        continue-on-error: true

      - name: Run ESLint
        run: npm run lint
        working-directory: ./interactiveflix

      - name: Run tests
        run: npm test
        working-directory: ./interactiveflix
        continue-on-error: true

      - name: Run Cypress tests
        run: npx cypress run --env react=${{ secrets.REACT_PASSWORD }}
        working-directory: ./interactiveflix
        continue-on-error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the Docker image
        run: |
          docker build ./interactiveflix \
            --file ./interactiveflix/Dockerfile \
            --tag react-frontend-service:latest \
            --build-arg REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }} \
            --build-arg REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }} \
            --build-arg REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }} \
            --build-arg REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }} \
            --build-arg REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}

      - name: Push Docker image to DockerHub
        run: |
          docker tag react-frontend-service:latest ${{ secrets.DOCKERHUB_USERNAME }}/react-frontend-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/react-frontend-service:latest

      - name: Set up Azure CLI
        uses: azure/setup-kubectl@v1
        with:
          version: "latest"

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Create Kubernetes secret for Firebase
        run: |
          kubectl create secret generic firebase-secrets \
            --from-literal=REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }} \
            --from-literal=REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }} \
            --from-literal=REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }} \
            --from-literal=REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }} \
            --from-literal=REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }} \
            --dry-run=client -o yaml > ./k8s/firebase-secrets.yaml
          kubectl apply -f ./k8s/firebase-secrets.yaml

      - name: Deploy to AKS
        run: |
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml
          kubectl apply -f ./k8s/hpa-react-frontend.yaml

      - name: Force rollout restart
        run: |
          kubectl rollout restart deployment react-frontend-service

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Change directory to /interactiveflix
        run: cd interactiveflix

      - name: Install dependencies
        run: npm install
        working-directory: ./interactiveflix

      - name: Run npm audit
        run: npm audit --audit-level=high
        working-directory: ./interactiveflix
        continue-on-error: true

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull and run Docker container
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/react-frontend-service:latest
          docker run -d -p 3000:80 --name react-frontend-service ${{ secrets.DOCKERHUB_USERNAME }}/react-frontend-service:latest

      - name: Run OWASP ZAP
        run: docker run -v $(pwd):/zap/wrk/:rw -t zaproxy/zap-stable zap-full-scan.py -t http://localhost:3000 -r zap_report.html
        continue-on-error: true

      - name: Upload OWASP ZAP report
        uses: actions/upload-artifact@v2
        with:
          name: zap-report
          path: zap_report.html

  api-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install Newman
        run: npm install -g newman

      - name: Run API tests
        run: newman run path/to/your-collection.json -e path/to/your-environment.json
